# You must sign into travis-ci.org and set the commit hook on your project for travis to
# run on your project. The secure: variable must be generated by running `travis encrypt`
# on a github oauth key that you can generate using curl.

language:
    node_js
node_js:
    - "iojs-v2.0.0"
    - "iojs"
notifications:
    irc: "irc.freenode.org#generator-travis-ci"
branches:
    only:
        - master
        - feature/jest
env:
    global:
        # GH_OAUTH_TOKEN is the oauth token generated as described at
        # https://help.github.com/articles/creating-an-oauth-token-for-command-line-use
        #
        # curl -u 'username' -d '{"scopes":["repo"],"note":"push to gh-pages from travis"}' https://api.github.com/authorizations
        #
        # It must be encrypted using the travis gem
        # http://about.travis-ci.org/docs/user/build-configuration/#Secure-environment-variables
        #
        # travis encrypt GH_OAUTH_TOKEN=XXXXXXXXXXXXXXX
        #
        # User specific env variables
        - secure: "MA7q5zQUcOj7qWSU4GwxVZw1QrIfZ5kMYZuQaAxLmEdrW8VYeWt/c0MLxkv9PzxhteqepH2dUSbEOBXV05gPv7Lq+8xqpMjp46nO/lAWDFVwqgqj81cHrn2YBcavxh7pB8dizNaIUuFyHUMxLjqwEg0kHWqaJNSeaPBfd3OqdBfkDowzKJNPMEvJPrF7Ufxt3/m01g7LfCUzUhCrGmJlZPmqWnQyLrIvPadtwDH2sD38DAdZi8k9YZmLLm7fb0rOk92jV8INFEv/H98w4StLYvw6UkNihTBP2kXIZ8AcE+WC1hA0J5u4SRfh8p+fxW+5yssUzMVUifw/xarF4d6OfGDqC73/hSf8WInTB1JPkc7H/riJZ+G4rjLr2Nn/fOlhzPLr+sV5A6yc8UpkGd7BKp5vFJ5+M1LiKRU6ZRC5dipe0f+EdpK0oglB6ZotqUobp+IxZm7P34RI0WklpYanqDyOziQJCHkUpRKUd/uttOsRCvR3SLneZzH/gr8VUJOwyTEIw4WBKmscTN0bKbgSlQEdu/QLLnMJOV6JzFAeciscJCBMeMnnW/jTT2fn0XeBuV3l8AtkG3/AjQ1HLoQ8pbsqr9JZPAzPik6cRVnXZ03hvwolxvwlnCS+e5i7SGcEw9GZZcBZX9tO+dsmMzuf2iZK5QgDSFof7vHT5EFxIaI="
        - GH_OWNER: knaufk
        - GH_PROJECT_NAME: beertopeer
        # This .travis.yml file instructs travis-ci.org to build your master branch using `yeoman build`
        # and deploy the output to your project's gh-pages branch.

before_script:
    # install dependencies
    - gem update --system
    - gem install compass
    - npm install -g grunt-cli bower
script:
    # We want to gate on passing tests and a successful build
    - bower install
    - npm test
    - grunt build
    - mocha test/spec/services/*
after_success:
    # Any command that using GH_OAUTH_TOKEN must pipe the output to /dev/null to not expose your oauth token
    - git submodule add -b gh-pages https://${GH_OAUTH_TOKEN}@github.com/${GH_OWNER}/${GH_PROJECT_NAME} site > /dev/null 2>&1
    - cd site
    - if git checkout gh-pages; then git checkout -b gh-pages; fi
    - git rm -r .
    - cp -R ../dist/* .
    - cp ../dist/.* .
    - git add -f .
    - ls -al
    - git config user.email "konstantin.knauf@tngtech.com"
    - git config user.name "Konstantin Knauf"
    - git commit -am "Deploy to gh-pages [ci skip]"
    # Any command that using GH_OAUTH_TOKEN must pipe the output to /dev/null to not expose your oauth token
    - git push https://${GH_OAUTH_TOKEN}@github.com/${GH_OWNER}/${GH_PROJECT_NAME} HEAD:gh-pages > /dev/null 2>&1
